1. Общее описание
Программа предназначена для преподавателя и запускается на его компьютере.
В ходе работы автоматически проверяет задания и накапливает статистику для одной группы студентов,
выполняющих лабораторные работы на некотором языке программирования (например, на Си).
Задание заключается в реализации тела заранее определенной функции, для которой 
преподаватель готовит шаблон с описанием и с одним или несколькими тестами.
Выполнив это задание, студент высылает свою работу в GIT-репозиторий преподавателя.
В этот момент выполняется основной bash-скрипт программы, сравнивающий фактический результат функции 
с ожидаемым. По окончанию заданного периода (например, месяц) преподавателю предоставляется статистика 
успешно и неуспешно пройденных тестов каждого задания для всей группы.

2. Особенности версии программы 1.0
- Задания поддерживаются в виде функции на языке Си, с конкретным именем и 
типом возвращаемого значения
- Описание и текстовые данные на англ. языке (нет проблемы различных кодировок)
В файле input_word.txt
- Ожидаемые и фактические значения функции записываются в текстовые файлы
- Статистика группы сохраняется в текстовом файле

3. Обновления в версии 2.0
- Поддержка других языков программирования (Python)
- Хранение статистики группы в SQL базе данных

4. Требования к рабочей среде
- *nix ОС с поддержкой bash
- Текстовый редактор (nano, VIM и т.п.)
- Си-компилятор (GCC и т.п.)
- Репозиторий GIT

5. Архитектура программы (на примере задания reverse_word.c)
Тестирующий скрипт auto_tester.sh должен находится в одной директории с тестируемой программой.
При первом запуске (или в случае отсутствия):
	1. Cоздаёт директории failure_folder и success_folder, куда перемещаются файлы исходного кода 
	(и остальные созданные для данного теста), с переименованием, прошедшие или не прошедшие 
	тестирование соответственно (можно просто удалять).
	2. Файл inpurt_word.txt с заданными параметрами, необходимый для reverse_word.c.
	3. Файл log.txt в который будут заноситься результаты тестирования и время прохождения теста.
	
Необходимо реализовать передачу скрипту файла с именем студента и прочими его данными.
Имею эти данные, log можно дополнить и составить список сдавших студентов для статистики. 

6. Алгоритм работы (на примере задания reverse_word.c)
	1. Проверка наличия reverse_word.c
	2. Компиляция reverse_word.c
	3. Проверка наличия исполняемого файла reverse_word.elf
	4. Запуск reverse_word.elf и подача ему на вход ранее созданного скриптом input_word.txt.
	5. Проверка наличия выходного файла output_word.txt.
	6. Сравнение содержимого output_word.txt с ожидаемым значением.
В случае не прохождения любой из проверок тест прекращается, данные об ошибке записываются в log.txt,
а файлы пермещаются в failure_folder. В случае успешного прохождения теста, данные об этом записываются
в log.txt, а файлы перемещаются в success_folder.

7. Требования к заданию (на примере задания reverse_word.c)
Тестируемая программа должна поставлятся в виде исходного кода, в одном файле, 
и иметь название reverse_word.c.
Она должна переворачивать слово (строку) записанную во входном файле input_word.txt 
(ограничение в 32 символа), и записывать её в выходной файл output_word.txt.
