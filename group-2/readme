Преподаватель создает репозиторий на github в котором находится папка StudentHW, файл passHW.txt, fail.txt, файл Tasks.txt и файл Readme.
В файле Tasks.txt находятся все задания для студентов и конкретные классы, входные/выходные данные.
В файле Readme находятся указания по выполнению заданий и структура репозитория, который должны создать студенты.

Студент должен создать репозиторий, названный по фамилии студента. В репозитории находятся папки Task1, Task2 ... TaskN по количеству заданий, которые дал преподаватель. Номер соответствует номеру задания. В каждой папке студент размещает выполненние задание. Когда все задания будут выполнены и добавлены в репозиторий, студент должен отправить преподавателю ссылку на свой репозиторий.

Преподаватель добавляет ссылки всех студентов в файл Links.txt и запускает скрипт.
Скрипт преподавателя запускает комманду git clone для каждой ссылки, отправленной студентами. Затем сохраняет в переменной StudentName название папки студента. Затем скрипт переходит в папку студента и сверяет количество папок с количеством заданий, если не совпадает, скрипт завершает работу с ошибкой. Если количество папок соответствует, скрипт продолжает работу. Скрипт последовательно переходит во вложенные папки и запускает файлы студента на исполнение с заранее подготовленными параметрами (файлы студента и классы/функции называются по заранее определенному шаблону), ожидая конкретного результата. Если хоть 1 ответ не соответствует ожиданию, задание не выполнено и скрипт записывает в файл fail.txt фамилию студента и номера не принятых заданий. Если тесты завершены успешно, скрипт заносит фамилию студента в файл на системе(passHW.txt), копирует папку студента в специально отведенную папку для готовых работ. Независимо от результата работы, перед завершением, скрипт удаляет репозиторий студента с локальной машины. По завершению всех проверок, скрипт отправляет обновленные файлы fail.txt и passHW.txt в свой репозиторий, чтобы студенты могли посмотреть результаты.
